# -*- coding: utf-8 -*-
"""
Created on Wed Jun 19 23:00:14 2024
@author: Arya0
"""
import numpy as np
import scipy.stats as sts

numberOfSimulations = 500
sampleSize = 200
quantiles = [0.01, 0.05, 0.1, 0.3, 0.5, 0.7, 0.9, 0.95, 0.99]
meanNormal = 115
stdDevNormal = 10

def generateRandomSamples(meanValue, stdDev, size):
    return np.random.normal(loc=meanValue, scale=stdDev, size=size)

def estimatedQuantileNormal(quantiles, samples):
    meanEstimate = np.mean(samples)
    stdDevEstimate = np.std(samples)
    return sts.norm.ppf(quantiles, loc=meanEstimate, scale=stdDevEstimate)

def estimatedQuantileLognormal(quantiles, samples):
    logSamples = np.log(samples)
    meanEstimate = np.mean(logSamples)
    stdDevEstimate = np.std(logSamples)
    return sts.lognorm.ppf(quantiles, s=stdDevEstimate, scale=np.exp(meanEstimate))

def estimatedQuantilePoisson(quantiles, samples):
    meanEstimate = np.mean(samples)
    return sts.norm.ppf(quantiles, loc=meanEstimate, scale=np.sqrt(meanEstimate))

def start():
    # Lognormal distribution
    lognormalQuantileEstimates = np.zeros((numberOfSimulations, len(quantiles)))
    lognormalQuantileStar = np.zeros(len(quantiles))
    
    for i in range(numberOfSimulations):
        normalDistSamples = np.random.normal(loc=meanNormal, scale=stdDevNormal, size=sampleSize)
        lognormalDistSamples = np.exp(normalDistSamples)
        lognormalQuantileEstimates[i, :] = estimatedQuantileLognormal(quantiles, lognormalDistSamples)
    
    for i in range(len(quantiles)):
        lognormalQuantileStar[i] = sts.lognorm.ppf(quantiles[i], s=stdDevNormal, scale=np.exp(meanNormal))
    
    print(f"Lognormal({meanNormal}) quantile estimates over {numberOfSimulations} simulations:")
    for i in range(len(quantiles)):
        print(f"For quantile = {quantiles[i]}: Mean quantile estimate is {np.mean(lognormalQuantileEstimates[:, i]):.4f} and quantile star is {lognormalQuantileStar[i]:.2f}")
    
    # Poisson distribution
    poissonQuantileEstimates = np.zeros((numberOfSimulations, len(quantiles)))
    poissonQuantileStar = np.zeros(len(quantiles))
    
    for i in range(numberOfSimulations):
        poissonDistSamples = np.random.poisson(lam=meanNormal, size=sampleSize)
        poissonQuantileEstimates[i, :] = estimatedQuantilePoisson(quantiles, poissonDistSamples)
    
    for i in range(len(quantiles)):
        poissonQuantileStar[i] = sts.poisson.ppf(quantiles[i], loc=meanNormal)
    
    print(f"\nPoisson({meanNormal}) quantile estimates over {numberOfSimulations} simulations:")
    for i in range(len(quantiles)):
        print(f"For quantile = {quantiles[i]}: Mean quantile estimate is {np.mean(poissonQuantileEstimates[:, i]):.4f} and quantile star is {poissonQuantileStar[i]:.2f}")

start()
